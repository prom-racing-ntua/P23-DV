cmake_minimum_required(VERSION 3.8)
project(ekf_slam)

# Default to C99
if(NOT CMAKE_C_STANDARD)
  set(CMAKE_C_STANDARD 99)
endif()

# Default to C++14
if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 17)
endif()

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic -std=c++17)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(ament_index_cpp REQUIRED)
find_package(Eigen3 REQUIRED)
find_package(rclcpp REQUIRED)
find_package(rclcpp_lifecycle REQUIRED)
find_package(tf2 REQUIRED)
find_package(tf2_geometry_msgs REQUIRED)
find_package(TBB REQUIRED)
find_package(visualization_msgs REQUIRED)
find_package(custom_msgs REQUIRED)
find_package(lifecycle_msgs REQUIRED)

include_directories(
  include
  include/lifecycle
  ${GTSAM_INCLUDE_DIRS}
  ${EIGEN_INCLUDE_DIRS}
  ${tf2_INCLUDE_DIRS}
  ${tf2_geometry_msgs_INCLUDE_DIRS}
)

# Add ekf_slam_from_file executable
add_executable(ekf_slam_from_file src/ekf_slam_from_file.cpp)
target_compile_features(ekf_slam_from_file PUBLIC c_std_99 cxx_std_17)
ament_target_dependencies(ekf_slam_from_file rclcpp Eigen3 custom_msgs)

# Install executables
install(TARGETS
  ekf_slam_from_file
  DESTINATION lib/${PROJECT_NAME})

  install(DIRECTORY
  DataFiles launch config
  DESTINATION share/${PROJECT_NAME}/
)

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  # the following line skips the linter which checks for copyrights
  # comment the line when a copyright and license is added to all source files
  set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # comment the line when this package is in a git repo and when
  # a copyright and license is added to all source files
  set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()

ament_package()
