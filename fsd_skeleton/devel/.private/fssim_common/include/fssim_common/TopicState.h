// Generated by gencpp from file fssim_common/TopicState.msg
// DO NOT EDIT!


#ifndef FSSIM_COMMON_MESSAGE_TOPICSTATE_H
#define FSSIM_COMMON_MESSAGE_TOPICSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fssim_common
{
template <class ContainerAllocator>
struct TopicState_
{
  typedef TopicState_<ContainerAllocator> Type;

  TopicState_()
    : topic_name()
    , expected_frequency(0.0)
    , measured_frequency(0.0)
    , passed(false)  {
    }
  TopicState_(const ContainerAllocator& _alloc)
    : topic_name(_alloc)
    , expected_frequency(0.0)
    , measured_frequency(0.0)
    , passed(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _topic_name_type;
  _topic_name_type topic_name;

   typedef float _expected_frequency_type;
  _expected_frequency_type expected_frequency;

   typedef float _measured_frequency_type;
  _measured_frequency_type measured_frequency;

   typedef uint8_t _passed_type;
  _passed_type passed;





  typedef boost::shared_ptr< ::fssim_common::TopicState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fssim_common::TopicState_<ContainerAllocator> const> ConstPtr;

}; // struct TopicState_

typedef ::fssim_common::TopicState_<std::allocator<void> > TopicState;

typedef boost::shared_ptr< ::fssim_common::TopicState > TopicStatePtr;
typedef boost::shared_ptr< ::fssim_common::TopicState const> TopicStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fssim_common::TopicState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fssim_common::TopicState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fssim_common::TopicState_<ContainerAllocator1> & lhs, const ::fssim_common::TopicState_<ContainerAllocator2> & rhs)
{
  return lhs.topic_name == rhs.topic_name &&
    lhs.expected_frequency == rhs.expected_frequency &&
    lhs.measured_frequency == rhs.measured_frequency &&
    lhs.passed == rhs.passed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fssim_common::TopicState_<ContainerAllocator1> & lhs, const ::fssim_common::TopicState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fssim_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fssim_common::TopicState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fssim_common::TopicState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fssim_common::TopicState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fssim_common::TopicState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fssim_common::TopicState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fssim_common::TopicState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fssim_common::TopicState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5557167df4d3920fba79516729b9f245";
  }

  static const char* value(const ::fssim_common::TopicState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5557167df4d3920fULL;
  static const uint64_t static_value2 = 0xba79516729b9f245ULL;
};

template<class ContainerAllocator>
struct DataType< ::fssim_common::TopicState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fssim_common/TopicState";
  }

  static const char* value(const ::fssim_common::TopicState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fssim_common::TopicState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string topic_name\n"
"float32 expected_frequency\n"
"float32 measured_frequency\n"
"bool passed\n"
;
  }

  static const char* value(const ::fssim_common::TopicState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fssim_common::TopicState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.topic_name);
      stream.next(m.expected_frequency);
      stream.next(m.measured_frequency);
      stream.next(m.passed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TopicState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fssim_common::TopicState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fssim_common::TopicState_<ContainerAllocator>& v)
  {
    s << indent << "topic_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.topic_name);
    s << indent << "expected_frequency: ";
    Printer<float>::stream(s, indent + "  ", v.expected_frequency);
    s << indent << "measured_frequency: ";
    Printer<float>::stream(s, indent + "  ", v.measured_frequency);
    s << indent << "passed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.passed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FSSIM_COMMON_MESSAGE_TOPICSTATE_H
