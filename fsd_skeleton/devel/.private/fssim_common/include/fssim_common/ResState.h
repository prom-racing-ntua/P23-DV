// Generated by gencpp from file fssim_common/ResState.msg
// DO NOT EDIT!


#ifndef FSSIM_COMMON_MESSAGE_RESSTATE_H
#define FSSIM_COMMON_MESSAGE_RESSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fssim_common
{
template <class ContainerAllocator>
struct ResState_
{
  typedef ResState_<ContainerAllocator> Type;

  ResState_()
    : emergency(false)
    , on_off_switch(false)
    , push_button(false)
    , communication_interrupted(false)  {
    }
  ResState_(const ContainerAllocator& _alloc)
    : emergency(false)
    , on_off_switch(false)
    , push_button(false)
    , communication_interrupted(false)  {
  (void)_alloc;
    }



   typedef uint8_t _emergency_type;
  _emergency_type emergency;

   typedef uint8_t _on_off_switch_type;
  _on_off_switch_type on_off_switch;

   typedef uint8_t _push_button_type;
  _push_button_type push_button;

   typedef uint8_t _communication_interrupted_type;
  _communication_interrupted_type communication_interrupted;





  typedef boost::shared_ptr< ::fssim_common::ResState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fssim_common::ResState_<ContainerAllocator> const> ConstPtr;

}; // struct ResState_

typedef ::fssim_common::ResState_<std::allocator<void> > ResState;

typedef boost::shared_ptr< ::fssim_common::ResState > ResStatePtr;
typedef boost::shared_ptr< ::fssim_common::ResState const> ResStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fssim_common::ResState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fssim_common::ResState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fssim_common::ResState_<ContainerAllocator1> & lhs, const ::fssim_common::ResState_<ContainerAllocator2> & rhs)
{
  return lhs.emergency == rhs.emergency &&
    lhs.on_off_switch == rhs.on_off_switch &&
    lhs.push_button == rhs.push_button &&
    lhs.communication_interrupted == rhs.communication_interrupted;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fssim_common::ResState_<ContainerAllocator1> & lhs, const ::fssim_common::ResState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fssim_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fssim_common::ResState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fssim_common::ResState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fssim_common::ResState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fssim_common::ResState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fssim_common::ResState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fssim_common::ResState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fssim_common::ResState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2c68d942044efe0714c25879acd65327";
  }

  static const char* value(const ::fssim_common::ResState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2c68d942044efe07ULL;
  static const uint64_t static_value2 = 0x14c25879acd65327ULL;
};

template<class ContainerAllocator>
struct DataType< ::fssim_common::ResState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fssim_common/ResState";
  }

  static const char* value(const ::fssim_common::ResState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fssim_common::ResState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# State of the three buttons on the RES\n"
"bool emergency 					# 0 = OK, 1 = Emergency\n"
"bool on_off_switch 				# 0 = 0, 1 = 1 (Comments couldn't be more helpful :p )\n"
"bool push_button 				# 1 = pressed\n"
"# RES will trigger emergency 200ms after this becomes 1 (unless communication is recovered)\n"
"bool communication_interrupted 	# 0 = OK, 1 = Interrupted\n"
;
  }

  static const char* value(const ::fssim_common::ResState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fssim_common::ResState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.emergency);
      stream.next(m.on_off_switch);
      stream.next(m.push_button);
      stream.next(m.communication_interrupted);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ResState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fssim_common::ResState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fssim_common::ResState_<ContainerAllocator>& v)
  {
    s << indent << "emergency: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.emergency);
    s << indent << "on_off_switch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.on_off_switch);
    s << indent << "push_button: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.push_button);
    s << indent << "communication_interrupted: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.communication_interrupted);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FSSIM_COMMON_MESSAGE_RESSTATE_H
