// Generated by gencpp from file fssim_common/CarInfo.msg
// DO NOT EDIT!


#ifndef FSSIM_COMMON_MESSAGE_CARINFO_H
#define FSSIM_COMMON_MESSAGE_CARINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <fssim_common/Vector3Ext.h>

namespace fssim_common
{
template <class ContainerAllocator>
struct CarInfo_
{
  typedef CarInfo_<ContainerAllocator> Type;

  CarInfo_()
    : header()
    , drag_force()
    , delta(0.0)
    , dc(0.0)
    , front_left_steering_angle(0.0)
    , front_right_steering_angle(0.0)
    , delta_measured(0.0)
    , vx(0.0)
    , vy(0.0)
    , r(0.0)
    , torque_ok(false)
    , alpha_f(0.0)
    , alpha_f_l(0.0)
    , alpha_f_r(0.0)
    , alpha_r_l(0.0)
    , alpha_r(0.0)
    , alpha_r_r(0.0)
    , Fy_f(0.0)
    , Fy_f_l(0.0)
    , Fy_f_r(0.0)
    , Fy_r(0.0)
    , Fy_r_l(0.0)
    , Fy_r_r(0.0)
    , Fx(0.0)  {
    }
  CarInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , drag_force(_alloc)
    , delta(0.0)
    , dc(0.0)
    , front_left_steering_angle(0.0)
    , front_right_steering_angle(0.0)
    , delta_measured(0.0)
    , vx(0.0)
    , vy(0.0)
    , r(0.0)
    , torque_ok(false)
    , alpha_f(0.0)
    , alpha_f_l(0.0)
    , alpha_f_r(0.0)
    , alpha_r_l(0.0)
    , alpha_r(0.0)
    , alpha_r_r(0.0)
    , Fy_f(0.0)
    , Fy_f_l(0.0)
    , Fy_f_r(0.0)
    , Fy_r(0.0)
    , Fy_r_l(0.0)
    , Fy_r_r(0.0)
    , Fx(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::fssim_common::Vector3Ext_<ContainerAllocator>  _drag_force_type;
  _drag_force_type drag_force;

   typedef double _delta_type;
  _delta_type delta;

   typedef double _dc_type;
  _dc_type dc;

   typedef double _front_left_steering_angle_type;
  _front_left_steering_angle_type front_left_steering_angle;

   typedef double _front_right_steering_angle_type;
  _front_right_steering_angle_type front_right_steering_angle;

   typedef double _delta_measured_type;
  _delta_measured_type delta_measured;

   typedef double _vx_type;
  _vx_type vx;

   typedef double _vy_type;
  _vy_type vy;

   typedef double _r_type;
  _r_type r;

   typedef uint8_t _torque_ok_type;
  _torque_ok_type torque_ok;

   typedef double _alpha_f_type;
  _alpha_f_type alpha_f;

   typedef double _alpha_f_l_type;
  _alpha_f_l_type alpha_f_l;

   typedef double _alpha_f_r_type;
  _alpha_f_r_type alpha_f_r;

   typedef double _alpha_r_l_type;
  _alpha_r_l_type alpha_r_l;

   typedef double _alpha_r_type;
  _alpha_r_type alpha_r;

   typedef double _alpha_r_r_type;
  _alpha_r_r_type alpha_r_r;

   typedef double _Fy_f_type;
  _Fy_f_type Fy_f;

   typedef double _Fy_f_l_type;
  _Fy_f_l_type Fy_f_l;

   typedef double _Fy_f_r_type;
  _Fy_f_r_type Fy_f_r;

   typedef double _Fy_r_type;
  _Fy_r_type Fy_r;

   typedef double _Fy_r_l_type;
  _Fy_r_l_type Fy_r_l;

   typedef double _Fy_r_r_type;
  _Fy_r_r_type Fy_r_r;

   typedef double _Fx_type;
  _Fx_type Fx;





  typedef boost::shared_ptr< ::fssim_common::CarInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fssim_common::CarInfo_<ContainerAllocator> const> ConstPtr;

}; // struct CarInfo_

typedef ::fssim_common::CarInfo_<std::allocator<void> > CarInfo;

typedef boost::shared_ptr< ::fssim_common::CarInfo > CarInfoPtr;
typedef boost::shared_ptr< ::fssim_common::CarInfo const> CarInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fssim_common::CarInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fssim_common::CarInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fssim_common::CarInfo_<ContainerAllocator1> & lhs, const ::fssim_common::CarInfo_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.drag_force == rhs.drag_force &&
    lhs.delta == rhs.delta &&
    lhs.dc == rhs.dc &&
    lhs.front_left_steering_angle == rhs.front_left_steering_angle &&
    lhs.front_right_steering_angle == rhs.front_right_steering_angle &&
    lhs.delta_measured == rhs.delta_measured &&
    lhs.vx == rhs.vx &&
    lhs.vy == rhs.vy &&
    lhs.r == rhs.r &&
    lhs.torque_ok == rhs.torque_ok &&
    lhs.alpha_f == rhs.alpha_f &&
    lhs.alpha_f_l == rhs.alpha_f_l &&
    lhs.alpha_f_r == rhs.alpha_f_r &&
    lhs.alpha_r_l == rhs.alpha_r_l &&
    lhs.alpha_r == rhs.alpha_r &&
    lhs.alpha_r_r == rhs.alpha_r_r &&
    lhs.Fy_f == rhs.Fy_f &&
    lhs.Fy_f_l == rhs.Fy_f_l &&
    lhs.Fy_f_r == rhs.Fy_f_r &&
    lhs.Fy_r == rhs.Fy_r &&
    lhs.Fy_r_l == rhs.Fy_r_l &&
    lhs.Fy_r_r == rhs.Fy_r_r &&
    lhs.Fx == rhs.Fx;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fssim_common::CarInfo_<ContainerAllocator1> & lhs, const ::fssim_common::CarInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fssim_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fssim_common::CarInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fssim_common::CarInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fssim_common::CarInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fssim_common::CarInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fssim_common::CarInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fssim_common::CarInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fssim_common::CarInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d1d7b96c5e9f10a89a35df8f3f330a2c";
  }

  static const char* value(const ::fssim_common::CarInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd1d7b96c5e9f10a8ULL;
  static const uint64_t static_value2 = 0x9a35df8f3f330a2cULL;
};

template<class ContainerAllocator>
struct DataType< ::fssim_common::CarInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fssim_common/CarInfo";
  }

  static const char* value(const ::fssim_common::CarInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fssim_common::CarInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"Vector3Ext drag_force\n"
"\n"
"float64 delta\n"
"float64 dc\n"
"\n"
"float64 front_left_steering_angle\n"
"float64 front_right_steering_angle\n"
"float64 delta_measured\n"
"\n"
"float64 vx\n"
"float64 vy\n"
"float64 r\n"
"\n"
"bool torque_ok \n"
"\n"
"float64 alpha_f\n"
"float64 alpha_f_l\n"
"float64 alpha_f_r\n"
"float64 alpha_r_l\n"
"float64 alpha_r\n"
"float64 alpha_r_r\n"
"\n"
"float64 Fy_f\n"
"float64 Fy_f_l\n"
"float64 Fy_f_r\n"
"float64 Fy_r\n"
"float64 Fy_r_l\n"
"float64 Fy_r_r\n"
"\n"
"float64 Fx\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: fssim_common/Vector3Ext\n"
"geometry_msgs/Vector3 vec\n"
"float64 mag\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::fssim_common::CarInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fssim_common::CarInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.drag_force);
      stream.next(m.delta);
      stream.next(m.dc);
      stream.next(m.front_left_steering_angle);
      stream.next(m.front_right_steering_angle);
      stream.next(m.delta_measured);
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.r);
      stream.next(m.torque_ok);
      stream.next(m.alpha_f);
      stream.next(m.alpha_f_l);
      stream.next(m.alpha_f_r);
      stream.next(m.alpha_r_l);
      stream.next(m.alpha_r);
      stream.next(m.alpha_r_r);
      stream.next(m.Fy_f);
      stream.next(m.Fy_f_l);
      stream.next(m.Fy_f_r);
      stream.next(m.Fy_r);
      stream.next(m.Fy_r_l);
      stream.next(m.Fy_r_r);
      stream.next(m.Fx);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CarInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fssim_common::CarInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fssim_common::CarInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "drag_force: ";
    s << std::endl;
    Printer< ::fssim_common::Vector3Ext_<ContainerAllocator> >::stream(s, indent + "  ", v.drag_force);
    s << indent << "delta: ";
    Printer<double>::stream(s, indent + "  ", v.delta);
    s << indent << "dc: ";
    Printer<double>::stream(s, indent + "  ", v.dc);
    s << indent << "front_left_steering_angle: ";
    Printer<double>::stream(s, indent + "  ", v.front_left_steering_angle);
    s << indent << "front_right_steering_angle: ";
    Printer<double>::stream(s, indent + "  ", v.front_right_steering_angle);
    s << indent << "delta_measured: ";
    Printer<double>::stream(s, indent + "  ", v.delta_measured);
    s << indent << "vx: ";
    Printer<double>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<double>::stream(s, indent + "  ", v.vy);
    s << indent << "r: ";
    Printer<double>::stream(s, indent + "  ", v.r);
    s << indent << "torque_ok: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.torque_ok);
    s << indent << "alpha_f: ";
    Printer<double>::stream(s, indent + "  ", v.alpha_f);
    s << indent << "alpha_f_l: ";
    Printer<double>::stream(s, indent + "  ", v.alpha_f_l);
    s << indent << "alpha_f_r: ";
    Printer<double>::stream(s, indent + "  ", v.alpha_f_r);
    s << indent << "alpha_r_l: ";
    Printer<double>::stream(s, indent + "  ", v.alpha_r_l);
    s << indent << "alpha_r: ";
    Printer<double>::stream(s, indent + "  ", v.alpha_r);
    s << indent << "alpha_r_r: ";
    Printer<double>::stream(s, indent + "  ", v.alpha_r_r);
    s << indent << "Fy_f: ";
    Printer<double>::stream(s, indent + "  ", v.Fy_f);
    s << indent << "Fy_f_l: ";
    Printer<double>::stream(s, indent + "  ", v.Fy_f_l);
    s << indent << "Fy_f_r: ";
    Printer<double>::stream(s, indent + "  ", v.Fy_f_r);
    s << indent << "Fy_r: ";
    Printer<double>::stream(s, indent + "  ", v.Fy_r);
    s << indent << "Fy_r_l: ";
    Printer<double>::stream(s, indent + "  ", v.Fy_r_l);
    s << indent << "Fy_r_r: ";
    Printer<double>::stream(s, indent + "  ", v.Fy_r_r);
    s << indent << "Fx: ";
    Printer<double>::stream(s, indent + "  ", v.Fx);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FSSIM_COMMON_MESSAGE_CARINFO_H
