# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fssim_common/CarInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import fssim_common.msg
import geometry_msgs.msg
import std_msgs.msg

class CarInfo(genpy.Message):
  _md5sum = "d1d7b96c5e9f10a89a35df8f3f330a2c"
  _type = "fssim_common/CarInfo"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
Vector3Ext drag_force

float64 delta
float64 dc

float64 front_left_steering_angle
float64 front_right_steering_angle
float64 delta_measured

float64 vx
float64 vy
float64 r

bool torque_ok 

float64 alpha_f
float64 alpha_f_l
float64 alpha_f_r
float64 alpha_r_l
float64 alpha_r
float64 alpha_r_r

float64 Fy_f
float64 Fy_f_l
float64 Fy_f_r
float64 Fy_r
float64 Fy_r_l
float64 Fy_r_r

float64 Fx
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: fssim_common/Vector3Ext
geometry_msgs/Vector3 vec
float64 mag

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['header','drag_force','delta','dc','front_left_steering_angle','front_right_steering_angle','delta_measured','vx','vy','r','torque_ok','alpha_f','alpha_f_l','alpha_f_r','alpha_r_l','alpha_r','alpha_r_r','Fy_f','Fy_f_l','Fy_f_r','Fy_r','Fy_r_l','Fy_r_r','Fx']
  _slot_types = ['std_msgs/Header','fssim_common/Vector3Ext','float64','float64','float64','float64','float64','float64','float64','float64','bool','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,drag_force,delta,dc,front_left_steering_angle,front_right_steering_angle,delta_measured,vx,vy,r,torque_ok,alpha_f,alpha_f_l,alpha_f_r,alpha_r_l,alpha_r,alpha_r_r,Fy_f,Fy_f_l,Fy_f_r,Fy_r,Fy_r_l,Fy_r_r,Fx

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CarInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.drag_force is None:
        self.drag_force = fssim_common.msg.Vector3Ext()
      if self.delta is None:
        self.delta = 0.
      if self.dc is None:
        self.dc = 0.
      if self.front_left_steering_angle is None:
        self.front_left_steering_angle = 0.
      if self.front_right_steering_angle is None:
        self.front_right_steering_angle = 0.
      if self.delta_measured is None:
        self.delta_measured = 0.
      if self.vx is None:
        self.vx = 0.
      if self.vy is None:
        self.vy = 0.
      if self.r is None:
        self.r = 0.
      if self.torque_ok is None:
        self.torque_ok = False
      if self.alpha_f is None:
        self.alpha_f = 0.
      if self.alpha_f_l is None:
        self.alpha_f_l = 0.
      if self.alpha_f_r is None:
        self.alpha_f_r = 0.
      if self.alpha_r_l is None:
        self.alpha_r_l = 0.
      if self.alpha_r is None:
        self.alpha_r = 0.
      if self.alpha_r_r is None:
        self.alpha_r_r = 0.
      if self.Fy_f is None:
        self.Fy_f = 0.
      if self.Fy_f_l is None:
        self.Fy_f_l = 0.
      if self.Fy_f_r is None:
        self.Fy_f_r = 0.
      if self.Fy_r is None:
        self.Fy_r = 0.
      if self.Fy_r_l is None:
        self.Fy_r_l = 0.
      if self.Fy_r_r is None:
        self.Fy_r_r = 0.
      if self.Fx is None:
        self.Fx = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.drag_force = fssim_common.msg.Vector3Ext()
      self.delta = 0.
      self.dc = 0.
      self.front_left_steering_angle = 0.
      self.front_right_steering_angle = 0.
      self.delta_measured = 0.
      self.vx = 0.
      self.vy = 0.
      self.r = 0.
      self.torque_ok = False
      self.alpha_f = 0.
      self.alpha_f_l = 0.
      self.alpha_f_r = 0.
      self.alpha_r_l = 0.
      self.alpha_r = 0.
      self.alpha_r_r = 0.
      self.Fy_f = 0.
      self.Fy_f_l = 0.
      self.Fy_f_r = 0.
      self.Fy_r = 0.
      self.Fy_r_l = 0.
      self.Fy_r_r = 0.
      self.Fx = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_12dB13d().pack(_x.drag_force.vec.x, _x.drag_force.vec.y, _x.drag_force.vec.z, _x.drag_force.mag, _x.delta, _x.dc, _x.front_left_steering_angle, _x.front_right_steering_angle, _x.delta_measured, _x.vx, _x.vy, _x.r, _x.torque_ok, _x.alpha_f, _x.alpha_f_l, _x.alpha_f_r, _x.alpha_r_l, _x.alpha_r, _x.alpha_r_r, _x.Fy_f, _x.Fy_f_l, _x.Fy_f_r, _x.Fy_r, _x.Fy_r_l, _x.Fy_r_r, _x.Fx))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.drag_force is None:
        self.drag_force = fssim_common.msg.Vector3Ext()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 201
      (_x.drag_force.vec.x, _x.drag_force.vec.y, _x.drag_force.vec.z, _x.drag_force.mag, _x.delta, _x.dc, _x.front_left_steering_angle, _x.front_right_steering_angle, _x.delta_measured, _x.vx, _x.vy, _x.r, _x.torque_ok, _x.alpha_f, _x.alpha_f_l, _x.alpha_f_r, _x.alpha_r_l, _x.alpha_r, _x.alpha_r_r, _x.Fy_f, _x.Fy_f_l, _x.Fy_f_r, _x.Fy_r, _x.Fy_r_l, _x.Fy_r_r, _x.Fx,) = _get_struct_12dB13d().unpack(str[start:end])
      self.torque_ok = bool(self.torque_ok)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_12dB13d().pack(_x.drag_force.vec.x, _x.drag_force.vec.y, _x.drag_force.vec.z, _x.drag_force.mag, _x.delta, _x.dc, _x.front_left_steering_angle, _x.front_right_steering_angle, _x.delta_measured, _x.vx, _x.vy, _x.r, _x.torque_ok, _x.alpha_f, _x.alpha_f_l, _x.alpha_f_r, _x.alpha_r_l, _x.alpha_r, _x.alpha_r_r, _x.Fy_f, _x.Fy_f_l, _x.Fy_f_r, _x.Fy_r, _x.Fy_r_l, _x.Fy_r_r, _x.Fx))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.drag_force is None:
        self.drag_force = fssim_common.msg.Vector3Ext()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 201
      (_x.drag_force.vec.x, _x.drag_force.vec.y, _x.drag_force.vec.z, _x.drag_force.mag, _x.delta, _x.dc, _x.front_left_steering_angle, _x.front_right_steering_angle, _x.delta_measured, _x.vx, _x.vy, _x.r, _x.torque_ok, _x.alpha_f, _x.alpha_f_l, _x.alpha_f_r, _x.alpha_r_l, _x.alpha_r, _x.alpha_r_r, _x.Fy_f, _x.Fy_f_l, _x.Fy_f_r, _x.Fy_r, _x.Fy_r_l, _x.Fy_r_r, _x.Fx,) = _get_struct_12dB13d().unpack(str[start:end])
      self.torque_ok = bool(self.torque_ok)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12dB13d = None
def _get_struct_12dB13d():
    global _struct_12dB13d
    if _struct_12dB13d is None:
        _struct_12dB13d = struct.Struct("<12dB13d")
    return _struct_12dB13d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
